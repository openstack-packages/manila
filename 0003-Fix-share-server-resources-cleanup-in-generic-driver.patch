From 77c3553f60a949610fc377112e0f562c1c5cdffd Mon Sep 17 00:00:00 2001
From: Valeriy Ponomaryov <vponomaryov@mirantis.com>
Date: Fri, 8 May 2015 16:04:41 +0300
Subject: [PATCH] Fix share-server resources cleanup in generic driver

Generic driver using Neutron creates and attaches service subnets to router.
When we have more than one share server using same service subnet and delete
one of them, then Manila removes service subnet from router.
It is improper behaviour, because other, not deleted, share servers lose
connection in that case. So, add port validation to get to know for sure,
whether service subnet is used or not.

Change-Id: I6e7d4c1b40304be39f84a23c00433f47a295d02c
Closes-Bug: #1452747
(cherry picked from commit c7f57b0d7bf2c45d30f8494a5fb4b6d42ec38583)
---
 manila/share/drivers/service_instance.py           | 25 +++++++-
 .../tests/share/drivers/test_service_instance.py   | 66 +++++++++++++++++++++-
 2 files changed, 87 insertions(+), 4 deletions(-)

diff --git a/manila/share/drivers/service_instance.py b/manila/share/drivers/service_instance.py
index 28529c9..edfee6e 100644
--- a/manila/share/drivers/service_instance.py
+++ b/manila/share/drivers/service_instance.py
@@ -647,11 +647,33 @@ class NeutronNetworkHelper(BaseNetworkhelper):
         else:
             return networks[0]['id']
 
+    @utils.synchronized(
+        "service_instance_setup_and_teardown_network_for_instance",
+        external=True)
     def teardown_network(self, server_details):
         subnet_id = server_details.get("subnet_id")
         router_id = server_details.get("router_id")
         if router_id and subnet_id:
+            ports = self.neutron_api.list_ports(
+                fields=['fixed_ips', 'device_id', 'device_owner'])
+            # NOTE(vponomaryov): iterate ports to get to know whether current
+            # subnet is used or not. We will not remove it from router if it
+            # is used.
+            for port in ports:
+                # NOTE(vponomaryov): if device_id is present, then we know that
+                # this port is used. Also, if device owner is 'compute:*', then
+                # we know that it is VM. We continue only if both are 'True'.
+                if (port['device_id'] and
+                        port['device_owner'].startswith('compute:')):
+                    for fixed_ip in port['fixed_ips']:
+                        if fixed_ip['subnet_id'] == subnet_id:
+                            # NOTE(vponomaryov): There are other share servers
+                            # exist that use this subnet. So, do not remove it
+                            # from router.
+                            return
             try:
+                # NOTE(vponomaryov): there is no other share servers or
+                # some VMs that use this subnet. So, remove it from router.
                 self.neutron_api.router_remove_interface(
                     router_id, subnet_id)
             except exception.NetworkException as e:
@@ -663,7 +685,8 @@ class NeutronNetworkHelper(BaseNetworkhelper):
             self.neutron_api.update_subnet(subnet_id, '')
 
     @utils.synchronized(
-        "service_instance_setup_network_for_instance", external=True)
+        "service_instance_setup_and_teardown_network_for_instance",
+        external=True)
     def setup_network(self, network_info):
         neutron_net_id = network_info['neutron_net_id']
         neutron_subnet_id = network_info['neutron_subnet_id']
diff --git a/manila/tests/share/drivers/test_service_instance.py b/manila/tests/share/drivers/test_service_instance.py
index 825fee1..36a2a93 100644
--- a/manila/tests/share/drivers/test_service_instance.py
+++ b/manila/tests/share/drivers/test_service_instance.py
@@ -1327,13 +1327,51 @@ class NeutronNetworkHelperTestCase(test.TestCase):
         self.assertFalse(
             service_instance.neutron.API.router_remove_interface.called)
 
-    def test_teardown_network_success(self):
+    def test_teardown_network_subnet_is_used(self):
         server_details = dict(subnet_id='foo', router_id='bar')
+        fake_ports = [
+            {'fixed_ips': [{'subnet_id': server_details['subnet_id']}],
+             'device_id': 'fake_device_id',
+             'device_owner': 'compute:foo'},
+        ]
         instance = self._init_neutron_network_plugin()
         self.mock_object(
             service_instance.neutron.API, 'router_remove_interface')
         self.mock_object(
             service_instance.neutron.API, 'update_subnet')
+        self.mock_object(
+            service_instance.neutron.API, 'list_ports',
+            mock.Mock(return_value=fake_ports))
+
+        instance.teardown_network(server_details)
+
+        self.assertFalse(
+            service_instance.neutron.API.router_remove_interface.called)
+        self.assertFalse(service_instance.neutron.API.update_subnet.called)
+        service_instance.neutron.API.list_ports.assert_called_once_with(
+            fields=['fixed_ips', 'device_id', 'device_owner'])
+
+    def test_teardown_network_subnet_not_used(self):
+        server_details = dict(subnet_id='foo', router_id='bar')
+        fake_ports = [
+            {'fixed_ips': [{'subnet_id': server_details['subnet_id']}],
+             'device_id': 'fake_device_id',
+             'device_owner': 'network:router_interface'},
+            {'fixed_ips': [{'subnet_id': 'bar' + server_details['subnet_id']}],
+             'device_id': 'fake_device_id',
+             'device_owner': 'compute'},
+            {'fixed_ips': [{'subnet_id': server_details['subnet_id']}],
+             'device_id': '',
+             'device_owner': 'compute'},
+        ]
+        instance = self._init_neutron_network_plugin()
+        self.mock_object(
+            service_instance.neutron.API, 'router_remove_interface')
+        self.mock_object(
+            service_instance.neutron.API, 'update_subnet')
+        self.mock_object(
+            service_instance.neutron.API, 'list_ports',
+            mock.Mock(return_value=fake_ports))
 
         instance.teardown_network(server_details)
 
@@ -1341,15 +1379,25 @@ class NeutronNetworkHelperTestCase(test.TestCase):
             assert_called_once_with('bar', 'foo')
         service_instance.neutron.API.update_subnet.\
             assert_called_once_with('foo', '')
+        service_instance.neutron.API.list_ports.assert_called_once_with(
+            fields=['fixed_ips', 'device_id', 'device_owner'])
 
-    def test_teardown_network_error_404(self):
+    def test_teardown_network_subnet_not_used_and_get_error_404(self):
         server_details = dict(subnet_id='foo', router_id='bar')
+        fake_ports = [
+            {'fixed_ips': [{'subnet_id': server_details['subnet_id']}],
+             'device_id': 'fake_device_id',
+             'device_owner': 'fake'},
+        ]
         instance = self._init_neutron_network_plugin()
         self.mock_object(
             service_instance.neutron.API, 'router_remove_interface',
             mock.Mock(side_effect=exception.NetworkException(code=404)))
         self.mock_object(
             service_instance.neutron.API, 'update_subnet')
+        self.mock_object(
+            service_instance.neutron.API, 'list_ports',
+            mock.Mock(return_value=fake_ports))
 
         instance.teardown_network(server_details)
 
@@ -1357,15 +1405,25 @@ class NeutronNetworkHelperTestCase(test.TestCase):
             assert_called_once_with('bar', 'foo')
         service_instance.neutron.API.update_subnet.\
             assert_called_once_with('foo', '')
+        service_instance.neutron.API.list_ports.assert_called_once_with(
+            fields=['fixed_ips', 'device_id', 'device_owner'])
 
-    def test_teardown_network_unhandled_error(self):
+    def test_teardown_network_subnet_not_used_get_unhandled_error(self):
         server_details = dict(subnet_id='foo', router_id='bar')
+        fake_ports = [
+            {'fixed_ips': [{'subnet_id': server_details['subnet_id']}],
+             'device_id': 'fake_device_id',
+             'device_owner': 'fake'},
+        ]
         instance = self._init_neutron_network_plugin()
         self.mock_object(
             service_instance.neutron.API, 'router_remove_interface',
             mock.Mock(side_effect=exception.NetworkException(code=500)))
         self.mock_object(
             service_instance.neutron.API, 'update_subnet')
+        self.mock_object(
+            service_instance.neutron.API, 'list_ports',
+            mock.Mock(return_value=fake_ports))
 
         self.assertRaises(
             exception.NetworkException,
@@ -1374,6 +1432,8 @@ class NeutronNetworkHelperTestCase(test.TestCase):
         service_instance.neutron.API.router_remove_interface.\
             assert_called_once_with('bar', 'foo')
         self.assertFalse(service_instance.neutron.API.update_subnet.called)
+        service_instance.neutron.API.list_ports.assert_called_once_with(
+            fields=['fixed_ips', 'device_id', 'device_owner'])
 
     def test_setup_network_and_connect_share_server_to_tenant_net(self):
         def fake_create_port(*aargs, **kwargs):
